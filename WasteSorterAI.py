import os
import random
import torch
import clip
from PIL import Image
import telebot
from telebot import types

TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    print("ERROR: BOT_TOKEN not set. Stop.")
    raise SystemExit("Set BOT_TOKEN environment variable before running.")

print("Starting bot...")

bot = telebot.TeleBot(TOKEN)

device = "cuda" if torch.cuda.is_available() else "cpu"
print("Loading CLIP model (this may take a minute)...")
model, preprocess = clip.load("ViT-B/32", device=device)
print("CLIP loaded on device:", device)

categories = {
    "paper": {
        "en": "üìÑ It's paper! Please recycle it in the paper bin ‚ôªÔ∏è. You can reuse for notes or crafts.",
        "ru": "üìÑ –≠—Ç–æ –±—É–º–∞–≥–∞! –°–¥–∞–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—É–º–∞–≥–∏ ‚ôªÔ∏è. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
        "kk": "üìÑ –ë“±–ª “õ–∞“ì–∞–∑! “ö–∞“ì–∞–∑ “õ–æ“õ—ã—Å –∂”ô—à—ñ–≥—ñ–Ω–µ —Å–∞–ª—ã“£—ã–∑ ‚ôªÔ∏è. “ö–∞–π—Ç–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É“ì–∞ –±–æ–ª–∞–¥—ã."
    },
    "plastic": {
        "en": "üçº It's plastic! Rinse and recycle in the plastic bin. Reduce single-use plastics üå±.",
        "ru": "üçº –≠—Ç–æ –ø–ª–∞—Å—Ç–∏–∫! –ü—Ä–æ–º–æ–π—Ç–µ –∏ —Å–¥–∞–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞. –ú–µ–Ω—å—à–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Å—Ç–∏–∫–∞ üå±.",
        "kk": "üçº –ë“±–ª –ø–ª–∞—Å—Ç–∏–∫! –ñ—É—ã–ø, –ø–ª–∞—Å—Ç–∏–∫ –∂”ô—à—ñ–≥—ñ–Ω–µ —Å–∞–ª—ã“£—ã–∑. –ë—ñ—Ä —Ä–µ—Ç—Ç—ñ–∫ –ø–ª–∞—Å—Ç–∏–∫—Ç—ñ –∞–∑–∞–π—Ç—ã“£—ã–∑ üå±."
    },
    "glass": {
        "en": "üçæ It's glass! Rinse bottles/jars and recycle. Wrap broken glass üß§.",
        "ru": "üçæ –≠—Ç–æ —Å—Ç–µ–∫–ª–æ! –ü—Ä–æ–º—ã—Ç—å –±—É—Ç—ã–ª–∫–∏/–±–∞–Ω–∫–∏ –∏ —Å–¥–∞—Ç—å. –ë–∏—Ç–æ–µ —Å—Ç–µ–∫–ª–æ —É–ø–∞–∫–æ–≤–∞—Ç—å üß§.",
        "kk": "üçæ –ë“±–ª ”ô–π–Ω–µ–∫! –ë”©—Ç–µ–ª–∫–µ/–±–∞–Ω–∫–∞–ª–∞—Ä–¥—ã –∂—É—ã–ø, “õ–∞–π—Ç–∞ ”©“£–¥–µ“£—ñ–∑. –°—ã–Ω“ì–∞–Ω—ã–Ω –æ—Ä–∞“£—ã–∑ üß§."
    },
    "metal": {
        "en": "ü•´ It's metal! Empty and rinse cans; recycle in metal bin üîÑ.",
        "ru": "ü•´ –≠—Ç–æ –º–µ—Ç–∞–ª–ª! –û–ø–æ—Ä–æ–∂–Ω–∏—Ç–µ –∏ –ø—Ä–æ–º–æ–π—Ç–µ –±–∞–Ω–∫–∏; —Å–¥–∞–π—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É üîÑ.",
        "kk": "ü•´ –ë“±–ª –º–µ—Ç–∞–ª–ª! –ë–∞–Ω–∫—ñ–ª–µ—Ä–¥—ñ –±–æ—Å–∞—Ç—ã–ø, –∂—É—ã–ø, “õ–∞–π—Ç–∞ ”©“£–¥–µ“£—ñ–∑ üîÑ."
    },
    "organic": {
        "en": "üçé Organic waste ‚Äî compost if possible. Keep it separate from plastics.",
        "ru": "üçé –û—Ä–≥–∞–Ω–∏–∫–∞ ‚Äî –∫–æ–º–ø–æ—Å—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –º–æ–∂–Ω–æ. –ù–µ —Å–º–µ—à–∏–≤–∞–π—Ç–µ —Å –ø–ª–∞—Å—Ç–∏–∫–æ–º.",
        "kk": "üçé –û—Ä–≥–∞–Ω–∏–∫–∞–ª—ã“õ “õ–∞–ª–¥—ã“õ ‚Äî –∫–æ–º–ø–æ—Å—Ç“õ–∞ —Å–∞–ª—ã“£—ã–∑. –ü–ª–∞—Å—Ç–∏–∫–ø–µ–Ω –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä–º–∞“£—ã–∑."
    },
    "e-waste": {
        "en": "üíª Electronic waste ‚Äî take it to e-waste collection points. Never regular bins.",
        "ru": "üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã ‚Äî —Å–¥–∞–≤–∞–π—Ç–µ –≤ —Å–ø–µ—Ü.–ø—É–Ω–∫—Ç—ã. –ù–µ –≤ –æ–±—ã—á–Ω—ã–π –º—É—Å–æ—Ä.",
        "kk": "üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ “õ–∞–ª–¥—ã“õ—Ç–∞—Ä ‚Äî –∞—Ä–Ω–∞–π—ã “õ–∞–±—ã–ª–¥–∞—É –ø—É–Ω–∫—Ç—ñ–Ω–µ –∞–ø–∞—Ä—ã“£—ã–∑."
    },
    "batteries": {
        "en": "üîã Batteries are hazardous ‚Äî hand them in at special collection boxes.",
        "ru": "üîã –ë–∞—Ç–∞—Ä–µ–π–∫–∏ ‚Äî –æ–ø–∞—Å–Ω—ã–µ. –°–¥–∞–≤–∞–π—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã.",
        "kk": "üîã –ë–∞—Ç–∞—Ä–µ–π–∫–∞–ª–∞—Ä “õ–∞—É—ñ–ø—Ç—ñ. –ê—Ä–Ω–∞–π—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–≥–µ —Ç–∞–ø—Å—ã—Ä—ã“£—ã–∑."
    },
    "clothes": {
        "en": "üëï Clothes ‚Äî donate if wearable, or recycle in textile bins.",
        "ru": "üëï –û–¥–µ–∂–¥–∞ ‚Äî –ø–æ–∂–µ—Ä—Ç–≤—É–π—Ç–µ –∏–ª–∏ —Å–¥–∞–π—Çe –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.",
        "kk": "üëï –ö–∏—ñ–º ‚Äî “õ–∞–π—ã—Ä—ã–º–¥—ã–ª—ã“õ“õ–∞ –±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ “õ–∞–π—Ç–∞ ”©“£–¥–µ“£—ñ–∑."
    },
    "cigarette": {
        "en": "üö¨ Cigarette butt ‚Äî throw only in a bin. Filters pollute soil and water.",
        "ru": "üö¨ –û–∫—É—Ä–æ–∫ ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —É—Ä–Ω—É. –§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—è–∑–Ω—è—é—Ç.",
        "kk": "üö¨ –¢–µ–º–µ–∫—ñ —Ç“±“õ—ã–ª—ã ‚Äî —Ç–µ–∫ “õ–æ“õ—ã—Å“õ–∞ —Ç–∞—Å—Ç–∞“£—ã–∑. –§–∏–ª—å—Ç—Ä–ª–µ—Ä –ª–∞—Å—Ç–∞–π–¥—ã."
    },
    "other": {
        "en": "‚ôªÔ∏è Other ‚Äî not a standard category, please dispose responsibly.",
        "ru": "‚ôªÔ∏è –î—Ä—É–≥–æ–µ ‚Äî –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —É—Ç–∏–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.",
        "kk": "‚ôªÔ∏è –ë–∞—Å“õ–∞ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç—Ç—ã —Å–∞–Ω–∞—Ç“õ–∞ –∂–∞—Ç–ø–∞–π–¥—ã, –∂–∞—É–∞–ø–∫–µ—Ä—à—ñ–ª—ñ–∫–ø–µ–Ω —Ç–∞—Å—Ç–∞“£—ã–∑."
    }
}

prompts = [
    "a photo of paper",
    "a photo of a plastic bottle",
    "a photo of a glass bottle",
    "a photo of a metal can",
    "a photo of food scraps / organic waste",
    "a photo of electronic waste like a phone or laptop",
    "a photo of batteries",
    "a photo of clothing or textile",
    "a photo of a cigarette butt",
    "a photo of mixed rubbish / trash"
]

texts = clip.tokenize(prompts).to(device)

eco_facts = {
    "en": [
        "üå± Recycling one glass bottle saves energy to power a computer ~25 minutes.",
        "üå≥ Recycling one ton of paper saves about 17 trees.",
        "‚ôªÔ∏è Recycling aluminum saves ~95% energy compared to new production."
    ],
    "ru": [
        "üå± –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–π –±—É—Ç—ã–ª–∫–∏ —ç–∫–æ–Ω–æ–º–∏—Ç —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã –ü–ö ~25 –º–∏–Ω—É—Ç.",
        "üå≥ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–Ω–Ω—ã –±—É–º–∞–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 17 –¥–µ—Ä–µ–≤—å–µ–≤.",
        "‚ôªÔ∏è –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—é–º–∏–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—Ç –æ–∫–æ–ª–æ 95% —ç–Ω–µ—Ä–≥–∏–∏."
    ],
    "kk": [
        "üå± –ë—ñ—Ä ”ô–π–Ω–µ–∫ –±”©—Ç–µ–ª–∫–µ–Ω—ñ “õ–∞–π—Ç–∞ ”©“£–¥–µ—É –∫–æ–º–ø—å—é—Ç–µ—Ä–¥—ñ —à–∞–º–∞–º–µ–Ω 25 –º–∏–Ω—É—Ç“õ–∞ “õ—É–∞—Ç—Ç–∞–Ω–¥—ã—Ä—É“ì–∞ –∂–µ—Ç–∫—ñ–ª—ñ–∫—Ç—ñ —ç–Ω–µ—Ä–≥–∏—è–Ω—ã “Ø–Ω–µ–º–¥–µ–π–¥—ñ.",
        "üå≥ –ë—ñ—Ä —Ç–æ–Ω–Ω–∞ “õ–∞“ì–∞–∑–¥—ã “õ–∞–π—Ç–∞ ”©“£–¥–µ—É —à–∞–º–∞–º–µ–Ω 17 –∞“ì–∞—à—Ç—ã —Å–∞“õ—Ç–∞–π–¥—ã.",
        "‚ôªÔ∏è –ê–ª—é–º–∏–Ω–∏–π–¥—ñ “õ–∞–π—Ç–∞ ”©“£–¥–µ—É –∂–∞“£–∞ ”©–Ω–¥—ñ—Ä—ñ—Å–∫–µ “õ–∞—Ä–∞“ì–∞–Ω–¥–∞ ~95% —ç–Ω–µ—Ä–≥–∏—è “Ø–Ω–µ–º–¥–µ–π–¥—ñ."
    ]
}

user_lang = {}

def get_lang(chat_id):
    return user_lang.get(chat_id, "en")

@bot.message_handler(commands=['start'])
def start_cmd(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üåç English", callback_data="lang_en"),
               types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
               types.InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kk"))
    bot.send_message(message.chat.id,
                     "üíö Hi eco-hero! I recognize 10 waste types: paper, plastic, glass, metal, organic, e-waste, batteries, clothes, cigarette, other.\n\nChoose your language:",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def callback_lang(call):
    lang = call.data.split("_")[1]
    user_lang[call.message.chat.id] = lang
    bot.answer_callback_query(call.id, "Language set ‚úì")
    bot.send_message(call.message.chat.id, f"‚úÖ Language set to {lang.upper()}.\nSend a photo or text (e.g. 'plastic bottle').")

@bot.message_handler(commands=['faq'])
def faq_cmd(message):
    lang = get_lang(message.chat.id)
    faq_text = {
        "en": "‚ùì FAQ:\n1) Send photo or text.\n2) I will suggest recycling instructions.\n3) Use /start to change language.",
        "ru": "‚ùì FAQ:\n1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n2) –Ø –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å.\n3) /start ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞.",
        "kk": "‚ùì FAQ:\n1) –°—É—Ä–µ—Ç –Ω–µ–º–µ—Å–µ –º”ô—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.\n2) –ú–µ–Ω “õ–∞–π—Ç–∞ ”©“£–¥–µ—É –∂”©–Ω—ñ–Ω–¥–µ –∞–π—Ç–∞–º—ã–Ω.\n3) /start ‚Äî —Ç—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É."
    }
    bot.send_message(message.chat.id, faq_text[lang])

@bot.message_handler(content_types=['text'])
def handle_text(message):
    lang = get_lang(message.chat.id)
    low = message.text.strip().lower()
    for key in categories.keys():
        if key in low:
            reply = categories[key][lang]
            fact = random.choice(eco_facts[lang])
            bot.send_message(message.chat.id, f"{reply}\n\nüåç Eco fact: {fact}")
            return
    bot.send_message(message.chat.id, {
        "en": "I didn't detect a category in text. Please send a photo or type the exact material (e.g. 'plastic').",
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'plastic').",
        "kk": "–ú”ô—Ç—ñ–Ω–¥–µ —Å–∞–Ω–∞—Ç –∞–Ω—ã“õ—Ç–∞–ª–º–∞–¥—ã. –°—É—Ä–µ—Ç –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –Ω–∞“õ—Ç—ã –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã 'plastic')."
    }[lang])

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    lang = get_lang(chat_id)
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    downloaded = bot.download_file(file_info.file_path)
    with open("temp.jpg", "wb") as f:
        f.write(downloaded)
    try:
        image = preprocess(Image.open("temp.jpg")).unsqueeze(0).to(device)
    except Exception as e:
        bot.send_message(chat_id, "Error processing image.")
        print("Image open error:", e)
        return
    with torch.no_grad():
        image_features = model.encode_image(image)
        text_features = model.encode_text(texts)
        image_features /= image_features.norm(dim=-1, keepdim=True)
        text_features /= text_features.norm(dim=-1, keepdim=True)
        logits = (100.0 * image_features @ text_features.T).softmax(dim=-1)
        probs = logits.cpu().numpy()[0]
    top_idx = int(probs.argmax())
    top_prob = float(probs[top_idx])
    label_key = list(categories.keys())[top_idx]
    reply_text = categories[label_key][lang]
    fact = random.choice(eco_facts[lang])
    if top_prob < 0.5:
        sorted_idx = probs.argsort()[::-1][:2]
        choice1 = list(categories.keys())[int(sorted_idx[0])]
        choice2 = list(categories.keys())[int(sorted_idx[1])]
        bot.send_message(chat_id,
                         f"ü§î I'm not fully sure. Looks like *{choice1}* ({probs[sorted_idx[0]]:.2f}) or *{choice2}* ({probs[sorted_idx[1]]:.2f}).\n"
                         f"If wrong, type the correct one.\n\nSuggested: {categories[choice1][lang]}\n\nüåç Eco fact: {fact}",
                         parse_mode="Markdown")
    else:
        bot.send_message(chat_id, f"‚úÖ I think *{label_key}*!\n\n{reply_text}\n\nüåç Eco fact: {fact}", parse_mode="Markdown")
    print(f"[LOG] {chat_id} -> {label_key} (conf={top_prob:.2f})")

if __name__ == "__main__":
    print("Bot is polling... (press Ctrl+C to stop)")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)
